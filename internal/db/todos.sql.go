// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: todos.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (user_id, title)
VALUES ($1, $2)
    RETURNING id, user_id, title, completed, created_at
`

type CreateTodoParams struct {
	UserID pgtype.Int4
	Title  string
}

// db/queries/todos.sql
func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.UserID, arg.Title)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const getTodosByUser = `-- name: GetTodosByUser :many
SELECT id, user_id, title, completed, created_at FROM todos
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTodosByUser(ctx context.Context, userID pgtype.Int4) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodosByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoStatus = `-- name: UpdateTodoStatus :exec
UPDATE todos
SET completed = $2
WHERE id = $1
`

type UpdateTodoStatusParams struct {
	ID        int32
	Completed pgtype.Bool
}

func (q *Queries) UpdateTodoStatus(ctx context.Context, arg UpdateTodoStatusParams) error {
	_, err := q.db.Exec(ctx, updateTodoStatus, arg.ID, arg.Completed)
	return err
}
