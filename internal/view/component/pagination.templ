package component

import (
	"fmt"
	"math"
	"todo-app/.gen/postgres/public/model"
	"todo-app/internal/dto"
)

templ Pagination(todos dto.PageResult[model.Todo], endpoint string, targetTagID string) {
	{{	maxPage := 5
	start := int(math.Floor(float64(todos.Page)/float64(maxPage)))*maxPage + 1
	end := start + maxPage - 1
	if end > todos.GetTotalPage() {
		end = todos.GetTotalPage()
	}

	}}
	<nav class="flex items-center gap-x-1" aria-label="Pagination">
	      <button
                    class="join-item btn"
                    hx-trigger="click"
                    hx-get={ fmt.Sprintf("/%s?page=0", endpoint) }
                    hx-target={fmt.Sprintf("#%s", targetTagID) }
                    hx-swap="outerHTML"
                >
                    First
                </button>

		<button type="button" class="min-h-9.5 min-w-9.5 py-2 px-2.5 inline-flex justify-center items-center gap-x-1.5 text-sm rounded-lg text-gray-800 hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10" aria-label="Previous"
		       hx-trigger="click"
                        hx-get={ fmt.Sprintf("/%s?page=%d", endpoint, todos.Page-1) }
                        hx-target={ fmt.Sprintf("#%s", targetTagID) }
                        hx-swap="outerHTML"
                        if todos.IsFirst() {
                            disabled
                        }
		>
			<svg class="shrink-0 size-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<path d="m15 18-6-6 6-6"></path>
			</svg>
			<span>Prev</span>
		</button>
		<div class="flex items-center gap-x-1"></div>
		for i := start; i <= end; i++ {

		    <button type="button"
        			    class={"min-h-9.5 min-w-9.5 flex justify-center items-center text-gray-800 hover:bg-gray-100 py-2 px-3 text-sm rounded-lg focus:outline-hidden focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10 " +  ternary(i == (todos.Page + 1), "bg-gray-300", "") }
        			    aria-current="page"
                        hx-trigger="click"
                        hx-swap="outerHTML"
                        hx-get={ fmt.Sprintf("/%s?page=%d", endpoint, i-1) }
                        hx-target={ fmt.Sprintf("#%s", targetTagID) }>
        			                       { fmt.Sprintf("%d", i) }
        			    </button>
            }
		<button type="button" class="min-h-9.5 min-w-9.5 py-2 px-2.5 inline-flex justify-center items-center gap-x-1.5 text-sm rounded-lg text-gray-800 hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10" aria-label="Next"
		           hx-trigger="click"
                            hx-get={ fmt.Sprintf("/%s?page=%d", endpoint, todos.Page+1) }
                            hx-target={ fmt.Sprintf("#%s", targetTagID) }
                            hx-swap="outerHTML"
                            if todos.IsLast() {
                                disabled
                            }

		>
			<span>Next</span>
			<svg class="shrink-0 size-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<path d="m9 18 6-6-6-6"></path>
			</svg>
		</button>

            // Last 버튼
            <button
                class="join-item btn"
                hx-trigger="click"
                hx-get={ fmt.Sprintf("/%s?page=%d", endpoint, todos.GetTotalPage()-1) }
                hx-target={ fmt.Sprintf("#%s", targetTagID) }
                hx-swap="outerHTML"
            >
                Last
            </button>
	</nav>
}


func ternary(condition bool, trueVal string, falseVal string) string {
    if condition {
        return trueVal
    }
    return falseVal
}